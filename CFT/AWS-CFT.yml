AWSTemplateFormatVersion: 2010-09-09

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "VPCCIDR"
        Paramaeters:
          - VpcCIDR  
      -
        Label:
          default: "Subnet CIDR"
        Paramaeters:
          - PublicSubnet1CIDR
          - PublicSubnet2CIDR
          - PrivateSubnet1CIDR
          - PrivateSubnet2CIDR
      -
        Label:
          default: "SSH CIDR"
        Paramaeters:
          - SSHLocation

Parameters:
  VpcCIDR:
    Default: 10.0.0.0/16
    Description: PLease Enter IP Range (CIDR Notation) for this Vpc
    Type: String

  PublicSubnet1CIDR:
    Default: 10.0.0.0/24
    Description: PLease Enter IP Range (CIDR Notation) for this Public Subnet1
    Type: String

  PublicSubnet2CIDR:
    Default: 10.0.1.0/24
    Description: PLease Enter IP Range (CIDR Notation) for this Public Subnet2
    Type: String

  PrivateSubnet1CIDR:
    Default: 10.0.2.0/24
    Description: PLease Enter IP Range (CIDR Notation) for this Private Subnet1
    Type: String

  PrivateSubnet2CIDR:
    Default: 10.0.3.0/24
    Description: PLease Enter IP Range (CIDR Notation) for this Private Subnet2
    Type: String

  SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    Description: The IP address range that can SSH to the EC2 instance
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    Type: String

Resources:
   VPC:
    Type: 'AWS::EC2::VPC'
    Properties: 
     CidrBlock: !Ref VpcCIDR
     EnableDnsHostnames: true
     EnableDnsSupport: true
     InstanceTenancy: default
     Tags: 
     - Key: Name
       Value: TestVPC

   InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
     Tags:
     - Key: Name
       Value: TestIGW

   InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties: 
     InternetGatewayId: !Ref InternetGateway
     VPCId: !Ref VPC

   PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:    
     AvailabilityZone: !Select [ 0, !GetAZs '' ]
     CidrBlock: !Ref PublicSubnet1CIDR
     MapPublicIpOnLaunch: true
     Tags:
     - Key: Name
       Value: PublicSubnet1
     VPCId: !Ref VPC

   PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:    
     AvailabilityZone: !Select [ 1, !GetAZs '' ]
     CidrBlock: !Ref PublicSubnet2CIDR
     MapPublicIpOnLaunch: true
     Tags:
     - Key: Name
       Value: PublicSubnet2
     VPCId: !Ref VPC
    

   PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
     VPCId: !Ref VPC
     Tags:
     - Key: Name
       Value: PublicRouteTable

   PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
     DestinationCidrBlock: 0.0.0.0/0
     GatewayId: !Ref InternetGateway
     RouteTableId: !Ref PublicRouteTable


   PublicSubnet1RouteTableAssosication:
     Type: 'AWS::EC2::SubnetRouteTableAssociation'
     Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

   PublicSubnet2RouteTableAssosication:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties: 
     RouteTableId: !Ref PublicRouteTable
     SubnetId: !Ref PublicSubnet2


   PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:    
     AvailabilityZone: !Select [ 0, !GetAZs '' ]
     CidrBlock: !Ref PrivateSubnet1CIDR
     MapPublicIpOnLaunch: false
     Tags:
     - key: Name
       value: PrivateSubnet1
     VPCId: !Ref VPC

   PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:    
     AvailabilityZone: !Select [ 1, !GetAZs '' ]
     CidrBlock: !Ref PrivateSubnet2CIDR
     MapPublicIpOnLaunch: false
     Tags:
     - key: Name
       value: PrivateSubnet2
     VPCId: !Ref VPC

   ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
     GroupDescription: Enable HTTP/HTTPS access on ports 80/443
     SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
     Tags:
     - Key: Name
       Value: ALBSecurityGroup
     VPCId: !Ref VPC   


   SSHSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
     GroupDescription: Enable SSHS access on port 22
     SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
     Tags:
     - Key: Name
       Value: SSHSecurityGroup
     VPCId: !Ref VPC   

   WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
     GroupDescription: Enable HTTP/HTTPS access on ports 80/443
     SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        SourceSecurityGroupId: !Ref ALBSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref SSHSecurityGroup
     Tags:
     - Key: Name
       Value: WebSecurityGroup
     VPCId: !Ref VPC   

Outputs:
  VPC:
    Description: VPC ID
    Export:
      Name: !Sub ${AWS::StackName}-VPC
    Value: !Ref VPC  
  PublicSubnet1:
    Description: PublicSubnet1 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet1
    Value: !Ref PublicSubnet1

  PublicSubnet2:
    Description: PublicSubnet2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PublicSubnet2
    Value: !Ref PublicSubnet2
  
  PrivateSubnet1:
    Description: PrivateSubnet1 ID
    Export:
      Name: !Sub ${AWS::StackName}-Privateubnet1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2:
    Description: PrivateSubnet2 ID
    Export:
      Name: !Sub ${AWS::StackName}-PrivateSubnet2
    Value: !Ref PrivateSubnet2
