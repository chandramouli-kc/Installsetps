apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  creationTimestamp: "2023-04-08T09:21:10Z"
  generation: 1
  name: nodejs-sample-pipeline
  namespace: default
  resourceVersion: "1171296"
  uid: 1e7dfa20-ab5f-4dfc-9852-01839c3ec5fe
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
              stages {
                    stage {
                      openshift.withCluster() { 
  openshift.withProject("refmodelproject") {
  
    def buildConfigExists = openshift.selector("bc", "codelikethewind").exists() 
    
    if(!buildConfigExists){ 
      openshift.newBuild("--name=codelikethewind", "--docker-image=registry.redhat.io/jboss-eap-7/eap74-openjdk8-openshift-rhel7", "--binary") 
    } 
    
    openshift.selector("bc", "codelikethewind").startBuild("--from-file=target/simple-servlet-0.0.1-SNAPSHOT.war", "--follow") } }
                    }
                  stage {
                    openshift.withCluster() { 
  openshift.withProject("refmodelproject") { 
    def deployment = openshift.selector("dc", "codelikethewind") 
    
    if(!deployment.exists()){ 
      openshift.newApp('codelikethewind', "--as-deployment-config").narrow('svc').expose() 
    } 
    
    timeout(5) { 
      openshift.selector("dc", "codelikethewind").related('pods').untilEach(1) { 
        return (it.object().status.phase == "Running") 
      } 
    } 
  } 
}
                  }  
              } //stages           


        } // pipeline
                  type: JenkinsPipeline
                successfulBuildsHistoryLimit: 5
              status:
                lastVersion: 0
